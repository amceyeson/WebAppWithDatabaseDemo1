trigger: 'none'

pr:
  branches:
    include:
      - master

jobs:
- job: Lint codebase
  displayName: 'Run GitHub Super-Linter on modified files'
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - checkout: self

  - task: Docker@2
    displayName: 'Run GitHub Super-Linter'
    inputs:
      command: 'run'
      container: 'github/super-linter:latest'
      arguments: >
        -e RUN_LOCAL=true
        -e VALIDATE_ALL_CODEBASE=false
        -v $(System.DefaultWorkingDirectory):/tmp/lint
#TODO implement sonarqube analysis

- job: ToDo Check
  displayName: 'Run ToDo Checker'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.11.5'
      addToPath: true

  - script: |
      MODIFIED_FILES=$(git diff --name-only origin/$(System.PullRequest.TargetBranch)...$(Build.SourceBranch) | tr '\n' ' ')
      python todoChecker/todo_checker.py \
      --root "$(Build.SourcesDirectory)" \
      --destination "$(build.ArtifactStagingDirectory)/todoReport" \
      --modified "$MODIFIED_FILES"
    displayName: 'Run ToDoChecker Python Script'


- job: Pr WebApp CI Build
  displayName: 'Build Web App'
  pool:
    vmImage: 'windows-2019'
  variables:
    BuildConfiguration: release

  steps:

  - task: UseDotNet@2
    displayName: Install required .NET sdk
    inputs:
      packageType: sdk
      version: 6.0.x
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: DotNetCoreCLI@2
    displayName: Restore required .NET packages
    inputs:
      command: restore
      projects: '**/WebApp.csproj'
  
  - task: DotNetCoreCLI@2
    displayName: Build csproj file
    inputs:
      projects: '**/WebApp.csproj'
      arguments: '--configuration $(BuildConfiguration)'
  
  - task: DotNetCoreCLI@2
    displayName: Run Unit Tests
    inputs:
      command: test
      projects: '**/*UnitTest*.csproj'
      arguments: '--configuration $(BuildConfiguration)'
  
  - task: DotNetCoreCLI@2
    displayName: Publish test results
    inputs:
      command: publish
      publishWebProjects: True
      arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
      zipAfterPublish: True

  - task: PublishBuildArtifacts@1
    displayName: 'Upload WebApp CI build results'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'

- job: Database
  displayName: 'Build Database'
  pool:
    vmImage: 'windows-2019'

  steps:
  - task: MSBuild@1
    displayName: 'Build solution WebApp.Database.sqlproj'
    inputs:
      solution: WebApp.Database/WebApp.Database.sqlproj
      msbuildArguments: '/p:OutDir=$(Build.ArtifactStagingDirectory)'
  
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact (Dacpac)'
    inputs:
      ArtifactName: dacpac

- job: Selenium Test
  displayName: 'Build UI Tests'
  pool:
    vmImage: 'windows-2019'

  steps:
  - task: NuGetToolInstaller@0
    displayName: 'Use NuGet 4.3.0'

  - task: NuGetCommand@2
    displayName: 'NuGet restore'
    inputs:
      restoreSolution: WebAppWithDatabase.sln

  - task: MSBuild@1
    displayName: 'Build project SeleniumUiTests.csproj'
    inputs:
      solution: SeleniumUiTests/SeleniumUiTests.csproj
      msbuildArguments: '/p:OutDir=$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: UI-Test'
    inputs:
      ArtifactName: 'UI-Test'
